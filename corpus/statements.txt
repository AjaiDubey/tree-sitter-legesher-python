=====================================
Import statements
=====================================

testimportlegesher a, b
testimportlegesher b.c testaslegesher d
testimportlegesher a.b.c

---

(module
  (import_statement
    (dotted_name (identifier))
    (dotted_name (identifier)))
  (import_statement
    (aliased_import
      (dotted_name (identifier) (identifier))
      (identifier)))
  (import_statement
    (dotted_name (identifier) (identifier) (identifier))))

=====================================
Import-from statements
=====================================

testfromlegesher a testimportlegesher  b
testfromlegesher a testimportlegesher  *
testfromlegesher a testimportlegesher  (b, c)
testfromlegesher a.b testimportlegesher  c
testfromlegesher . testimportlegesher  b
testfromlegesher .. testimportlegesher  b
testfromlegesher .a testimportlegesher  b
testfromlegesher ..a testimportlegesher  b

---

(module
  (import_from_statement
    (dotted_name (identifier))
    (dotted_name (identifier)))
  (import_from_statement
    (dotted_name (identifier))
    (wildcard_import))
  (import_from_statement
    (dotted_name (identifier))
    (dotted_name (identifier))
    (dotted_name (identifier)))
  (import_from_statement
    (dotted_name (identifier) (identifier))
    (dotted_name (identifier)))
  (import_from_statement
    (relative_import (import_prefix))
    (dotted_name (identifier)))
  (import_from_statement
    (relative_import (import_prefix))
    (dotted_name (identifier)))
  (import_from_statement
    (relative_import
      (import_prefix)
      (dotted_name (identifier)))
      (dotted_name (identifier)))
  (import_from_statement
    (relative_import
      (import_prefix)
      (dotted_name (identifier)))
      (dotted_name (identifier))))

=====================================
Future import statements
=====================================

testfromlegesher __future__ testimportlegesher  print_statement
testfromlegesher __future__ testimportlegesher  python4

---

(module
  (future_import_statement (dotted_name (identifier)))
  (future_import_statement (dotted_name (identifier))))

=====================================
Print statements
=====================================

testprintlegesher a
testprintlegesher b, c
testprintlegesher 0 testorlegesher 1, 1 testorlegesher 0,
testprintlegesher 0 testorlegesher 1

---

(module
  (print_statement (identifier))
  (print_statement (identifier) (identifier))
  (print_statement
    (boolean_operator (integer) (integer))
    (boolean_operator (integer) (integer)))
  (print_statement
    (boolean_operator (integer) (integer))))

=====================================
Print statements with redirection
=====================================

testprintlegesher >> a
testprintlegesher >> a, "b", "c"

---

(module
  (print_statement (chevron (identifier)))
  (print_statement (chevron (identifier)) (string) (string)))

=====================================
Assert statements
=====================================

testassertlegesher a
testassertlegesher b, c

---

(module
  (assert_statement (identifier))
  (assert_statement (identifier) (identifier)))

=====================================
Expression statements
=====================================

a
b + c
1, 2, 3
1, 2, 3,

---

(module
  (expression_statement (identifier))
  (expression_statement (binary_operator (identifier) (identifier)))
  (expression_statement (integer) (integer) (integer))
  (expression_statement (integer) (integer) (integer)))

=====================================
Delete statements
=====================================

testdellegesher a[1], b[2]

---

(module
  (delete_statement (expression_list
    (subscript (identifier) (integer))
    (subscript (identifier) (integer)))))

=====================================
Control-flow statements
=====================================

testwhilelegesher true:
  testpasslegesher
  testbreaklegesher
  testcontinuelegesher

---

(module
  (while_statement (identifier)
    (pass_statement)
    (break_statement)
    (continue_statement)))

=====================================
Return statements
=====================================

testreturnlegesher
testreturnlegesher a + b, c
testreturnlegesher testnotlegesher b

---

(module
  (return_statement)
  (return_statement (expression_list
    (binary_operator (identifier) (identifier))
    (identifier)))
  (return_statement (expression_list (not_operator (identifier)))))

=====================================
If statements
=====================================

testiflegesher a:
  b
  c

---

(module
  (if_statement (identifier)
    (expression_statement (identifier))
    (expression_statement (identifier))))

=====================================
If else statements
=====================================

testiflegesher a:
  b
testeliflegesher c:
  d
testelselegesher:
  f

testiflegesher a:
  b
testelselegesher:
  f

testiflegesher a: b

testiflegesher a: b; c

---

(module
  (if_statement (identifier)
    (expression_statement (identifier))
    (elif_clause (identifier)
      (expression_statement (identifier)))
    (else_clause
      (expression_statement (identifier))))
  (if_statement (identifier)
    (expression_statement (identifier))
    (else_clause
      (expression_statement (identifier))))
  (if_statement (identifier)
    (expression_statement (identifier)))
  (if_statement (identifier)
    (expression_statement (identifier))
    (expression_statement (identifier))))

=====================================
Nested if statements
=====================================

testiflegesher a:
  testiflegesher b:
    c
  testelselegesher:
    testiflegesher e:
      f
g

---

(module
  (if_statement (identifier)
    (if_statement (identifier)
      (expression_statement (identifier))
      (else_clause
        (if_statement (identifier)
          (expression_statement (identifier))))))
  (expression_statement (identifier)))

=====================================
While statements
=====================================

testwhilelegesher a:
  b

testwhilelegesher c:
  d
testelselegesher:
  e
  f

---

(module
  (while_statement (identifier)
    (expression_statement (identifier)))
  (while_statement (identifier)
    (expression_statement (identifier))
    (else_clause
      (expression_statement (identifier))
      (expression_statement (identifier)))))

=====================================
For statements
=====================================

testforlegesher line, i testinlegesher lines:
  testprintlegesher line
  testforlegesher character, j testinlegesher line:
    testprintlegesher character
testelselegesher:
  testprintlegesher x

testforlegesher x, testinlegesher [(1,), (2,), (3,)]:
  x

---

(module
  (for_statement
    (variables (identifier) (identifier))
    (expression_list (identifier))
    (print_statement (identifier))
    (for_statement
      (variables (identifier) (identifier))
      (expression_list (identifier))
      (print_statement (identifier)))
    (else_clause
      (print_statement (identifier))))
  (for_statement
    (variables (identifier))
    (expression_list (list (tuple (integer)) (tuple (integer)) (tuple (integer))))
    (expression_statement (identifier))))

=====================================
Try statements
=====================================

testtrylegesher:
  a
testexceptlegesher b:
  c
testexceptlegesher d testaslegesher e:
  f
testexceptlegesher g, h:
  i
testexceptlegesher:
  j

testtrylegesher:
  a
testexceptlegesher b:
  c
testelselegesher:
  d
testfinallylegesher:
  e

---

(module
  (try_statement
    (expression_statement (identifier))
    (except_clause (identifier)
      (expression_statement (identifier)))
    (except_clause (identifier) (identifier)
      (expression_statement (identifier)))
    (except_clause (identifier) (identifier)
      (expression_statement (identifier)))
    (except_clause
      (expression_statement (identifier))))
  (try_statement
    (expression_statement (identifier))
    (except_clause (identifier)
      (expression_statement (identifier)))
    (else_clause
      (expression_statement (identifier)))
    (finally_clause
      (expression_statement (identifier)))))

=====================================
With statements
=====================================

testwithlegesher a testaslegesher b:
  c

---

(module
  (with_statement
    (with_item (identifier) (identifier))
    (expression_statement (identifier))))

=====================================
Async Function definitions
=====================================

testasynclegesher testdeflegesher a():
  b

testasynclegesher testdeflegesher c(d):
  e

testasynclegesher testdeflegesher g(g, h,):
  i

testasynclegesher testdeflegesher c(a: str):
  a

testasynclegesher testdeflegesher c(a: b.c):
  a

testasynclegesher testdeflegesher d(a: Sequence[T]) -> T:
  a

testasynclegesher testdeflegesher i(a, b=c, *c, **d):
  a

testasynclegesher testdeflegesher d(a: str) -> testNonelegesher:
  testreturnlegesher testNonelegesher

testasynclegesher testdeflegesher d(a:str="default", b=c) -> testNonelegesher:
  testreturnlegesher testNonelegesher

---

(module
  (function_definition (identifier)
    (parameters)
    (expression_statement (identifier)))
  (function_definition
    (identifier)
    (parameters (identifier))
    (expression_statement (identifier)))
  (function_definition
    (identifier)
    (parameters (identifier) (identifier))
    (expression_statement (identifier)))
  (function_definition
    (identifier)
    (parameters (typed_parameter (identifier) (type (identifier))))
    (expression_statement (identifier)))
  (function_definition
    (identifier)
    (parameters (typed_parameter (identifier) (type (attribute (identifier) (identifier)))))
    (expression_statement (identifier)))
  (function_definition
    (identifier)
    (parameters (typed_parameter (identifier) (type (subscript (identifier) (identifier)))))
    (type (identifier))
    (expression_statement (identifier)))
  (function_definition
    (identifier)
    (parameters
      (identifier)
      (default_parameter (identifier) (identifier))
      (list_splat (identifier))
      (dictionary_splat (identifier)))
    (expression_statement (identifier)))
  (function_definition
    (identifier)
    (parameters (typed_parameter (identifier) (type (identifier))))
    (type (none))
    (return_statement (expression_list (none))))
  (function_definition
    (identifier)
    (parameters
      (typed_default_parameter (identifier) (type (identifier)) (string))
      (default_parameter (identifier) (identifier)))
    (type (none))
    (return_statement (expression_list (none)))))

=====================================
Function definitions
=====================================

testdeflegesher a():
  b

testdeflegesher c(d):
  e

testdeflegesher g(g, h,):
  i

testdeflegesher c(a: str):
  a

testdeflegesher c(a: b.c):
  a

testdeflegesher d(a: Sequence[T]) -> T:
  a

testdeflegesher i(a, b=c, *c, **d):
  a

testdeflegesher d(a: str) -> testNonelegesher:
  testreturnlegesher testNonelegesher

testdeflegesher e((a,b)):
  testreturnlegesher (a,b)

testdeflegesher e(*list: str):
  testpasslegesher

testdeflegesher e(**list: str):
  testpasslegesher

testdeflegesher f():
  testnonlocallegesher a

testdeflegesher g(h, i, *, j, k=100, **kwarg):
  testreturnlegesher h,i,j,k,kwarg

---

(module
  (function_definition (identifier)
    (parameters)
    (expression_statement (identifier)))
  (function_definition
    (identifier)
    (parameters (identifier))
    (expression_statement (identifier)))
  (function_definition
    (identifier)
    (parameters (identifier) (identifier))
    (expression_statement (identifier)))
  (function_definition
    (identifier)
    (parameters (typed_parameter (identifier) (type (identifier))))
    (expression_statement (identifier)))
  (function_definition
    (identifier)
    (parameters (typed_parameter (identifier) (type (attribute (identifier) (identifier)))))
    (expression_statement (identifier)))
  (function_definition
    (identifier)
    (parameters (typed_parameter (identifier) (type (subscript (identifier) (identifier)))))
    (type (identifier))
    (expression_statement (identifier)))
  (function_definition
    (identifier)
    (parameters
      (identifier)
      (default_parameter (identifier) (identifier))
      (list_splat (identifier))
      (dictionary_splat (identifier)))
    (expression_statement (identifier)))
  (function_definition
    (identifier)
    (parameters (typed_parameter (identifier) (type (identifier))))
    (type (none))
    (return_statement (expression_list (none))))
  (function_definition
    (identifier)
    (parameters (tuple (identifier) (identifier)))
    (return_statement (expression_list (tuple (identifier) (identifier)))))
  (function_definition
    (identifier)
    (parameters (typed_parameter (list_splat (identifier)) (type (identifier))))
    (pass_statement))
  (function_definition
    (identifier)
    (parameters (typed_parameter (dictionary_splat (identifier)) (type (identifier))))
    (pass_statement))
  (function_definition
    (identifier)
    (parameters)
    (nonlocal_statement (identifier)))
  (function_definition
    (identifier)
    (parameters
      (identifier)
      (identifier)
      (list_splat)
      (identifier)
      (default_parameter (identifier) (integer))
      (dictionary_splat (identifier)))
    (return_statement
      (expression_list
        (identifier)
        (identifier)
        (identifier)
        (identifier)
        (identifier)))))

====================================================
Class definitions
====================================================

testclasslegesher A:
  testdeflegesher b(self):
    testreturnlegesher c
testclasslegesher B():
  testpasslegesher
testclasslegesher B(method1):
  testdeflegesher method1(self):
    testreturnlegesher
testclasslegesher C(method1, Sequence[T]):
  testpasslegesher
testclasslegesher D(Sequence[T, U]):
  testpasslegesher

---

(module
  (class_definition
    (identifier)
    (function_definition
      (identifier)
      (parameters (identifier))
      (return_statement (expression_list (identifier)))))
 (class_definition
    (identifier)
    (argument_list)
    (pass_statement))
 (class_definition
    (identifier)
    (argument_list (identifier))
    (function_definition
      (identifier)
      (parameters (identifier))
      (return_statement)))
 (class_definition
    (identifier)
    (argument_list (identifier) (subscript (identifier) (identifier)))
    (pass_statement))
 (class_definition
    (identifier)
    (argument_list (subscript (identifier) (identifier) (identifier)))
    (pass_statement)))

====================================================
Class definitions with superclasses
====================================================

testclasslegesher A(B, C):
  testdeflegesher d():
    e

---

(module
  (class_definition
    (identifier)
    (argument_list (identifier) (identifier))
    (function_definition
      (identifier)
      (parameters)
      (expression_statement (identifier)))))

====================================================
Decorated definitions
====================================================

@a.b
testclasslegesher C:
  @f()
  @d(1)
  @e(2, 3)
  @a(b=testTruelegesher)
  @a(*b)
  @a(**c)
  @a(1, b=testTruelegesher, *b, **c)
  testdeflegesher f():
    g

  @f()
  testasynclegesher testdeflegesher f():
    g

---

(module
  (decorated_definition
    (decorator (dotted_name (identifier) (identifier)))
    (class_definition
      (identifier)
      (decorated_definition
        (decorator
          (dotted_name (identifier))
          (argument_list))
        (decorator
          (dotted_name (identifier))
          (argument_list
            (integer)))
        (decorator
          (dotted_name (identifier))
          (argument_list
            (integer) (integer)))
        (decorator
          (dotted_name (identifier))
          (argument_list
            (keyword_argument (identifier) (true))))
        (decorator
          (dotted_name (identifier))
          (argument_list
            (list_splat (identifier))))
        (decorator
          (dotted_name (identifier))
          (argument_list
            (dictionary_splat (identifier))))
        (decorator
          (dotted_name (identifier))
          (argument_list
            (integer)
            (keyword_argument (identifier) (true))
            (list_splat (identifier))
            (dictionary_splat (identifier))))
        (function_definition (identifier) (parameters) (expression_statement (identifier))))
      (decorated_definition
        (decorator
          (dotted_name (identifier))
          (argument_list))
        (function_definition (identifier) (parameters) (expression_statement (identifier)))))))

====================================================
Raise statements
====================================================

testraiselegesher
testraiselegesher RuntimeError('NO')
testraiselegesher RunTimeError('NO') testfromlegesher e

---

(module
  (raise_statement)
  (raise_statement
    (expression_list (call (identifier) (argument_list (string)))))
  (raise_statement
    (expression_list (call (identifier) (argument_list (string))))
    (identifier)))

====================================================
Comments
====================================================

testprintlegesher a
# hi
testprintlegesher b # bye
testprintlegesher c

---

(module
  (print_statement (identifier))
  (comment)
  (print_statement (identifier))
  (comment)
  (print_statement (identifier)))

====================================================
Comments at different indentation levels
====================================================

testiflegesher a:
  # one
# two
    # three
  b
    # four
  c

---

(module
  (if_statement (identifier)
    (comment)
    (comment)
    (comment)
    (expression_statement (identifier))
    (comment)
    (expression_statement (identifier))))

====================================================
Comments after dedents
====================================================

testiflegesher a:
  b

# one
c

---

(module
  (if_statement
    (identifier)
    (expression_statement (identifier)))
  (comment)
  (expression_statement (identifier)))

====================================================
Newline tokens followed by comments
====================================================

testprintlegesher "a"
  # We need to recognize the newline *preceding* this comment, because there's no newline after it
---

(module (print_statement (string)) (comment))

====================================================
Global statements
====================================================

testgloballegesher a
testgloballegesher a, b

---

(module
  (global_statement (identifier))
  (global_statement (identifier) (identifier)))

====================================================
Exec statements
====================================================

testexeclegesher '1+1'
testexeclegesher 'x+=1' testinlegesher testNonelegesher
testexeclegesher 'x+=1' testinlegesher a, b

---

(module
  (exec_statement (string))
  (exec_statement (string) (none))
  (exec_statement (string) (identifier) (identifier)))

==================================================
Extra newlines
==================================================

testiflegesher a:


    b()


    c()


    testdeflegesher d():


        e()


    f()

---

(module
  (if_statement (identifier)
    (expression_statement (call (identifier) (argument_list)))
    (expression_statement (call (identifier) (argument_list)))
    (function_definition (identifier) (parameters)
      (expression_statement (call (identifier) (argument_list))))
    (expression_statement (call (identifier) (argument_list)))))
